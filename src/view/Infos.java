/*
 * Copyright Yacine Mayou
 * Software created by Yacine Mayou
 */
package view;

import java.util.Arrays;
import java.util.List;
import java.util.Vector;
import javax.swing.JFrame;
import javax.swing.SwingUtilities;
import javax.swing.event.TableModelEvent;
import javax.swing.event.TableModelListener;
import javax.swing.table.DefaultTableModel;
import model.Categorie;

/**
 *
 * @author You
 */
public class Infos extends javax.swing.JPanel {
    int id;
    /**
     * Creates new form Infos
     */
    public Infos() {
        initComponents();
        grid.getColumnModel().getColumn(0).setMaxWidth(200);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        gridPanel = new javax.swing.JScrollPane();
        grid = new javax.swing.JTable();
        btAddCategorie = new javax.swing.JButton();

        setName(""); // NOI18N

        grid.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        grid.setCellSelectionEnabled(true);
        gridPanel.setViewportView(grid);

        btAddCategorie.setText("New categorie");
        btAddCategorie.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btAddCategorieActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(gridPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 858, Short.MAX_VALUE)
            .addComponent(btAddCategorie, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(gridPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 619, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btAddCategorie)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btAddCategorieActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btAddCategorieActionPerformed
        InfosEdit infosEdit = new InfosEdit((JFrame)SwingUtilities.getWindowAncestor(this), true, this);
        infosEdit.setLocationRelativeTo(null);
        infosEdit.setVisible(true);
    }//GEN-LAST:event_btAddCategorieActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btAddCategorie;
    private javax.swing.JTable grid;
    private javax.swing.JScrollPane gridPanel;
    // End of variables declaration//GEN-END:variables

    public void setData(List<Vector> cats) {
        InfosModel model = new InfosModel(cats.get(0));
        model.setDataVector(cats.get(1), cats.get(0));
        model.addTableModelListener(model);
        grid.setModel(model);
    }

    private static class InfosModel extends DefaultTableModel implements TableModelListener {

        public InfosModel(Vector<String> columnNames) {
            super(new String[]{Arrays.toString(columnNames.toArray())}, 0);
        }

        @Override
        public Class<?> getColumnClass(int columnIndex) {
            Class clazz = String.class;
            switch (columnIndex) {
                case 0:
                    clazz = Integer.class;
                    break;
                case 2:
                    clazz = Boolean.class;
                    break;
            }
            return clazz;
        }

        @Override
        public boolean isCellEditable(int row, int column) {
            return column == 2 || column == 1;
        }

        @Override
        public void setValueAt(Object aValue, int row, int column) {
            if (aValue instanceof Boolean && column == 2) {
                Vector rowData = (Vector) getDataVector().get(row);
                rowData.set(2, (boolean) aValue);
            }
            else if (aValue instanceof String && column == 1) {
                Vector rowData = (Vector) getDataVector().get(row);
                rowData.set(1, aValue.toString());
            }
            fireTableCellUpdated(row, column);
        }

        @Override
        public void tableChanged(TableModelEvent e) {
            Vector rowData = (Vector) getDataVector().get(e.getLastRow());
            Categorie cat = new Categorie((int)rowData.get(0), rowData.get(1).toString(), (boolean)rowData.get(2), rowData.get(3).toString());
            cat.update();
        }
    }

}